{"dependencies":[{"name":"/home/kiifox/Documents/projects/portfolio/node_modules/nanoraf/package.json","includedInParent":true,"mtime":1530827544099},{"name":"/home/kiifox/Documents/projects/portfolio/package.json","includedInParent":true,"mtime":1530828980612},{"name":"assert","loc":{"line":3,"column":21},"parent":"/home/kiifox/Documents/projects/portfolio/node_modules/nanoraf/index.js","resolved":"/home/kiifox/.nvm/versions/node/v9.2.1/lib/node_modules/parcel-bundler/node_modules/assert/assert.js"}],"generated":{"js":"'use strict'\n\nvar assert = require('assert')\n\nmodule.exports = nanoraf\n\n// Only call RAF when needed\n// (fn, fn?) -> fn\nfunction nanoraf (render, raf) {\n  assert.equal(typeof render, 'function', 'nanoraf: render should be a function')\n  assert.ok(typeof raf === 'function' || typeof raf === 'undefined', 'nanoraf: raf should be a function or undefined')\n\n  if (!raf) raf = window.requestAnimationFrame\n  var redrawScheduled = false\n  var args = null\n\n  return function frame () {\n    if (args === null && !redrawScheduled) {\n      redrawScheduled = true\n\n      raf(function redraw () {\n        redrawScheduled = false\n\n        var length = args.length\n        var _args = new Array(length)\n        for (var i = 0; i < length; i++) _args[i] = args[i]\n\n        render.apply(render, _args)\n        args = null\n      })\n    }\n\n    args = arguments\n  }\n}\n","map":{"mappings":[{"source":"node_modules/nanoraf/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/nanoraf/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}}],"sources":{"node_modules/nanoraf/index.js":"'use strict'\n\nvar assert = require('assert')\n\nmodule.exports = nanoraf\n\n// Only call RAF when needed\n// (fn, fn?) -> fn\nfunction nanoraf (render, raf) {\n  assert.equal(typeof render, 'function', 'nanoraf: render should be a function')\n  assert.ok(typeof raf === 'function' || typeof raf === 'undefined', 'nanoraf: raf should be a function or undefined')\n\n  if (!raf) raf = window.requestAnimationFrame\n  var redrawScheduled = false\n  var args = null\n\n  return function frame () {\n    if (args === null && !redrawScheduled) {\n      redrawScheduled = true\n\n      raf(function redraw () {\n        redrawScheduled = false\n\n        var length = args.length\n        var _args = new Array(length)\n        for (var i = 0; i < length; i++) _args[i] = args[i]\n\n        render.apply(render, _args)\n        args = null\n      })\n    }\n\n    args = arguments\n  }\n}\n"},"lineCount":36}},"hash":"ce231f8bc33d2a62a080c88827d9960c","cacheData":{"env":{}},"id":24}